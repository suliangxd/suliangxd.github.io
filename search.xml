<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[C/C++实现函数返回字符串]]></title>
    <url>%2F2017%2F09%2F04%2FC-C-%E5%AE%9E%E7%8E%B0%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[问题如何实现一个返回值为char*的函数1char* fun(...); 解决方法方法1：返回字符串常量返回一个指向字符串常量的指针，但是这个方法非常局限，因为字符串常量存储在全局静态区，是只读内存区，无法对它进行计算和修改123456789char* fun() &#123; return "hello world";&#125;// 或者如下方式char* fun() &#123; // 不加const_cast会有warning:warning: deprecated conversion from string constant to 'char*' [-Wwrite-strings] char *str = const_cast&lt;char *&gt;("hello world"); return str;&#125; 方法2：使用全局申明的数组变量使用一个全局数组变量来存储，简单易用，缺点是任何人可以在任何时候都可以修改这个数组，而且函数的下一次调用会覆盖掉当前值，此外，全局数组的内存大小需要$ \geq $函数返回值所需要的内存大小12345678char g_str[100];char* fun() &#123; ... g_str[i] = ... ... return g_str;&#125; 方法3：使用静态数组static可以保持变量内容的持久。存储在静态数据区的变量会在程序刚开始运行就完成初始化，也是唯一一次初始化。只有拥有指向该数组的指针可以修改这个静态数组，函数的下一次调用会覆盖这个数组的内容（static的初始化赋值语句只会执行一次）。此外，和全局数组一样，大型缓冲区闲置不用非常浪费内存12345char* fun() &#123; static char buffer[100]; ... return buffer;&#125; 方法4：函数内部显示分配堆内存来保存返回值每次调用时都会创建新的内存，所以该函数调用不会覆盖以前的返回值。适用于多线程。缺点是程序员必须手动管理内存，不在同一代码块中malloc和free，会很容易出现内存泄露的bug12345678char* fun() &#123; char *str = (char *)malloc(100*sizeof(char)); ... return str;&#125;// 外部调用后需要释放内存char *str = fun()free(str); 方法5：调用者分配内存来保存返回值【推荐】最佳方案：调用者分配内存来保存函数的返回值，在同一个代码块中malloc和free内存，同时调用者应该设置指定缓冲区大小123456789101112char* fun(char *result, int size) &#123; ... strncpy(result, 'hello world', size); ... return result;&#125;// 外部调用char *buffer = (char *)malloc(size);fun(buffer, size);...free(buffer); 标准库中的fgets()等函数就是采用这样的方法来实现1char *fgets(char *str, int n, FILE *stream); 给出一个调用fgets()的示例程序，来自 www.cplusplus.com 1234567891011121314151617/* fgets example */#include &lt;stdio.h&gt;int main()&#123; FILE * pFile; char mystring [100]; pFile = fopen ("myfile.txt" , "r"); if (pFile == NULL) perror ("Error opening file"); else &#123; if ( fgets (mystring , 100 , pFile) != NULL ) puts (mystring); fclose (pFile); &#125; return 0;&#125;]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
</search>
