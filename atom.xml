<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Light&#39;s Home</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://coderlight.cn/"/>
  <updated>2017-10-12T10:00:40.000Z</updated>
  <id>http://coderlight.cn/</id>
  
  <author>
    <name>Light</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cmake教程</title>
    <link href="http://coderlight.cn/2017/10/12/cmake%E6%95%99%E7%A8%8B/"/>
    <id>http://coderlight.cn/2017/10/12/cmake教程/</id>
    <published>2017-10-12T08:17:49.000Z</published>
    <updated>2017-10-12T10:00:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开始：介绍和安装"><a href="#开始：介绍和安装" class="headerlink" title="开始：介绍和安装"></a>开始：介绍和安装</h2><p>cmake是跨平台的编译构建工具，通过开发者编写CMakeList.txt文件来定制编译，然后开发者调用<code>cmake</code>命令就可以一步生成Makefile文件(也支持是工程文件)，如unix的Makefile或者windows的vs工程。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ wget --no-check-certificate https://cmake.org/files/v3.9/cmake-3.9.4.tar.gz</div><div class="line">$ tar -zxvf cmake-3.9.4.tar.gz</div><div class="line">$ <span class="built_in">cd</span> cmake-3.9.4</div><div class="line">$ ./bootstrap &amp;&amp; make &amp;&amp; make install</div></pre></td></tr></table></figure>
<h3 id="基本使用流程："><a href="#基本使用流程：" class="headerlink" title="基本使用流程："></a>基本使用流程：</h3><ul>
<li>编写CMake 配置文件 CMakeLists.txt <br></li>
<li>执行命令<code>cmake $PATH</code>生成Makefile <br></li>
<li>使用<code>make</code>命令编译</li>
</ul>
<h2 id="一-基本点"><a href="#一-基本点" class="headerlink" title="一. 基本点"></a>一. 基本点</h2><p>最简单的项目是直接从源代码文件构建一个可执行文件，只需要在CMakeLists.txt中几行代码就可以完成。如下所示：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cmake 最低版本</span></div><div class="line">cmake_minimum_required (VERSION <span class="number">2.6</span>)</div><div class="line"><span class="comment"># 项目名</span></div><div class="line">project (Tutorial)</div><div class="line"><span class="comment"># 添加可执行文件Tutorial以及源代码文件tutorial.cxx</span></div><div class="line">add_executable(Tutorial tutorial.cxx)</div></pre></td></tr></table></figure>
<h3 id="添加版本号和配置文件"><a href="#添加版本号和配置文件" class="headerlink" title="添加版本号和配置文件"></a>添加版本号和配置文件</h3><p>给我们的可执行文件添加版本号，当然我们可以直接在源代码文件中来实现，但是通过CMakeLists.txt中实现会更加灵活。</p>
<h4 id="第一步：我们需要按如下方式修改CMakeLists-txt文件来添加版本号"><a href="#第一步：我们需要按如下方式修改CMakeLists-txt文件来添加版本号" class="headerlink" title="第一步：我们需要按如下方式修改CMakeLists.txt文件来添加版本号"></a>第一步：我们需要按如下方式修改CMakeLists.txt文件来添加版本号</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">cmake_minimum_required (VERSION <span class="number">2.6</span>)</div><div class="line">project (Tutorial)</div><div class="line"><span class="comment"># 版本号信息</span></div><div class="line">set (Tutorial_VERSION_MAJOR <span class="number">1</span>)</div><div class="line">set (Tutorial_VERSION_MINOR <span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment"># 定义一个头文件将CMake配置信息通过头文件传给源代码</span></div><div class="line">configure_file (</div><div class="line">  <span class="string">"$&#123;PROJECT_SOURCE_DIR&#125;/TutorialConfig.h.in"</span></div><div class="line">  <span class="string">"$&#123;PROJECT_BINARY_DIR&#125;/TutorialConfig.h"</span></div><div class="line">  )</div><div class="line"></div><div class="line"><span class="comment">#  在include目录中添加$&#123;PROJECT_BINARY_DIR&#125;（相当于-I参数）, 使得可以找到TutorialConfig.h</span></div><div class="line">include_directories(<span class="string">"$&#123;PROJECT_BINARY_DIR&#125;"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 添加可执行文件</span></div><div class="line">add_executable(Tutorial tutorial.cxx)</div></pre></td></tr></table></figure>
<h4 id="第二步：我们需要创建一个TutorialConfig-h-in文件在源代码目录下，内容如下："><a href="#第二步：我们需要创建一个TutorialConfig-h-in文件在源代码目录下，内容如下：" class="headerlink" title="第二步：我们需要创建一个TutorialConfig.h.in文件在源代码目录下，内容如下："></a>第二步：我们需要创建一个TutorialConfig.h.in文件在源代码目录下，内容如下：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// the configured options and settings for Tutorial</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@</span></div></pre></td></tr></table></figure>
<h4 id="第三步：当我们在CMakeLists-txt中通过代码set-Tutorial-VERSION-MAJOR-1-和set-Tutorial-VERSION-MINOR-0-修改Tutorial-VERSION-MAJOR和-Tutorial-VERSION-MINOR这两个变量，调用cmake命令就会生成新的TutorialConfig-h文件，而不用修改源代码。"><a href="#第三步：当我们在CMakeLists-txt中通过代码set-Tutorial-VERSION-MAJOR-1-和set-Tutorial-VERSION-MINOR-0-修改Tutorial-VERSION-MAJOR和-Tutorial-VERSION-MINOR这两个变量，调用cmake命令就会生成新的TutorialConfig-h文件，而不用修改源代码。" class="headerlink" title="第三步：当我们在CMakeLists.txt中通过代码set (Tutorial_VERSION_MAJOR 1)和set (Tutorial_VERSION_MINOR 0)修改Tutorial_VERSION_MAJOR和 Tutorial_VERSION_MINOR这两个变量，调用cmake命令就会生成新的TutorialConfig.h文件，而不用修改源代码。"></a>第三步：当我们在CMakeLists.txt中通过代码<code>set (Tutorial_VERSION_MAJOR 1)</code>和<code>set (Tutorial_VERSION_MINOR 0)</code>修改<code>Tutorial_VERSION_MAJOR</code>和 <code>Tutorial_VERSION_MINOR</code>这两个变量，调用cmake命令就会生成新的TutorialConfig.h文件，而不用修改源代码。</h4><h3 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// A simple program that computes the square root of a number</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"TutorialConfig.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">    # 注意这里输出格式Tutorial_VERSION_MAJOR和Tutorial_VERSION_MINOR是<span class="keyword">int</span>型</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>,<span class="string">"%s Version %d.%d\n"</span>,</div><div class="line">            argv[<span class="number">0</span>],</div><div class="line">            Tutorial_VERSION_MAJOR,</div><div class="line">            Tutorial_VERSION_MINOR);</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>,<span class="string">"Usage: %s number\n"</span>,argv[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">  <span class="keyword">double</span> inputValue = atof(argv[<span class="number">1</span>]);</div><div class="line">  <span class="keyword">double</span> outputValue = <span class="built_in">sqrt</span>(inputValue);</div><div class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>,<span class="string">"The square root of %g is %g\n"</span>,</div><div class="line">          inputValue, outputValue);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="完整源代码以及CMakeLists-txt文件：Step1"><a href="#完整源代码以及CMakeLists-txt文件：Step1" class="headerlink" title="完整源代码以及CMakeLists.txt文件：Step1"></a>完整源代码以及CMakeLists.txt文件：<a href="https://gitlab.kitware.com/cmake/cmake/tree/master/Tests/Tutorial/Step1" target="_blank" rel="external">Step1</a></h3><h2 id="二-添加库"><a href="#二-添加库" class="headerlink" title="二. 添加库"></a>二. 添加库</h2><p>如何添加一个库到项目中呢？我们在一些可以跨平台的项目中会看到同一个功能的库会在不同的头文件中，如何在不变代码的情况下，灵活的可选择的添加库呢？</p>
<h3 id="示例目录结构"><a href="#示例目录结构" class="headerlink" title="示例目录结构"></a>示例目录结构</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">./Tutorial</div><div class="line">     |</div><div class="line">     +--- CMakeLists.txt</div><div class="line">     |</div><div class="line">     +--- TutorialConfig.h.in</div><div class="line">     |</div><div class="line">     +--- tutorial.cpp</div><div class="line">     |</div><div class="line">     +---MathFunctions/ 库所在的目录</div><div class="line">                |</div><div class="line">                +--- CMakeLists.txt</div><div class="line">                |</div><div class="line">                +--- MathFunctions.h</div><div class="line">                |</div><div class="line">                +--- mysqrt.cpp</div></pre></td></tr></table></figure>
<h4 id="第一步-在库所在的子目录中添加CMakeLists-txt，内容如下："><a href="#第一步-在库所在的子目录中添加CMakeLists-txt，内容如下：" class="headerlink" title="第一步 在库所在的子目录中添加CMakeLists.txt，内容如下："></a>第一步 在库所在的子目录中添加CMakeLists.txt，内容如下：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 生成一个静态链接库</span></div><div class="line">add_library(MathFunctions mysqrt.cxx)</div></pre></td></tr></table></figure>
<h4 id="第二步-在源代码所在的目录的CMakeLists-txt需要添加库目录，添加include目录（相当于-I），添加库链接-相当于-l"><a href="#第二步-在源代码所在的目录的CMakeLists-txt需要添加库目录，添加include目录（相当于-I），添加库链接-相当于-l" class="headerlink" title="第二步 在源代码所在的目录的CMakeLists.txt需要添加库目录，添加include目录（相当于-I），添加库链接(相当于-l)"></a>第二步 在源代码所在的目录的CMakeLists.txt需要添加库目录，添加include目录（相当于-I），添加库链接(相当于-l)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 添加库所在的目录到include</span></div><div class="line">include_directories (<span class="string">"$&#123;PROJECT_SOURCE_DIR&#125;/MathFunctions"</span>)</div><div class="line"><span class="comment"># 添加库所做在的子目录</span></div><div class="line">add_subdirectory (MathFunctions)</div><div class="line"></div><div class="line"><span class="comment"># 添加可执行文件</span></div><div class="line">add_executable (Tutorial tutorial.cxx)</div><div class="line"><span class="comment"># 添加链接库</span></div><div class="line">target_link_libraries (Tutorial MathFunctions)</div></pre></td></tr></table></figure>
<p>以上，我们已经实现了添加库对应的CMakeLists的实现，接下来实现如何可选择的添加库和链接</p>
<h4 id="第三步-我们需要定义一个宏，类似于添加版本号那样的实现"><a href="#第三步-我们需要定义一个宏，类似于添加版本号那样的实现" class="headerlink" title="第三步 我们需要定义一个宏，类似于添加版本号那样的实现"></a>第三步 我们需要定义一个宏，类似于添加版本号那样的实现</h4><ul>
<li>在TutorialConfig.h.in中添加<code>#cmakedefine USE_MYMATH</code></li>
<li>在源代码目录的CMakeLists.txt中添加一行 <code>option (USE_MYMATH &quot;Use tutorial provided math implementation&quot; ON)</code>，对应是否设置<code>USE_MYMATH</code>, ON表示开启</li>
<li>同时在该CMakeLists.txt中针对<code>USE_MYMATH</code>加上if逻辑来指定添加库和链接</li>
<li>源代码中可以使用<code>ifdef USE_MYMATH</code>来选择代码实现</li>
</ul>
<h4 id="完整CMakeLists-txt文件"><a href="#完整CMakeLists-txt文件" class="headerlink" title="完整CMakeLists.txt文件"></a>完整CMakeLists.txt文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">cmake_minimum_required (VERSION <span class="number">2.6</span>)</div><div class="line">project (Tutorial)</div><div class="line"></div><div class="line"><span class="comment"># 版本号</span></div><div class="line">set (Tutorial_VERSION_MAJOR <span class="number">1</span>)</div><div class="line">set (Tutorial_VERSION_MINOR <span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment"># 宏USE_MYMATH开启</span></div><div class="line">option(USE_MYMATH <span class="string">"Use tutorial provided math implementation"</span> ON)</div><div class="line"></div><div class="line">configure_file (</div><div class="line">  <span class="string">"$&#123;PROJECT_SOURCE_DIR&#125;/TutorialConfig.h.in"</span></div><div class="line">  <span class="string">"$&#123;PROJECT_BINARY_DIR&#125;/TutorialConfig.h"</span></div><div class="line">  )</div><div class="line"></div><div class="line"><span class="comment"># 将TutorialConfig.h的目录添加到include</span></div><div class="line">include_directories (<span class="string">"$&#123;PROJECT_BINARY_DIR&#125;"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 根据USE_MYMATH来判断是否添加依赖库</span></div><div class="line"><span class="keyword">if</span> (USE_MYMATH)</div><div class="line">  include_directories (<span class="string">"$&#123;PROJECT_SOURCE_DIR&#125;/MathFunctions"</span>)</div><div class="line">  add_subdirectory (MathFunctions)</div><div class="line">  set (EXTRA_LIBS $&#123;EXTRA_LIBS&#125; MathFunctions)</div><div class="line">endif ()</div><div class="line"></div><div class="line"><span class="comment"># 可执行文件</span></div><div class="line">add_executable (Tutorial tutorial.cxx)</div><div class="line"><span class="comment"># 库链接到可执行文件</span></div><div class="line">target_link_libraries (Tutorial  $&#123;EXTRA_LIBS&#125;)</div></pre></td></tr></table></figure>
<h4 id="对应源代码："><a href="#对应源代码：" class="headerlink" title="对应源代码："></a>对应源代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// A simple program that computes the square root of a number</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"TutorialConfig.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USE_MYMATH</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MathFunctions.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"%s Version %d.%d\n"</span>, argv[<span class="number">0</span>], Tutorial_VERSION_MAJOR,</div><div class="line">            Tutorial_VERSION_MINOR);</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"Usage: %s number\n"</span>, argv[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">double</span> inputValue = atof(argv[<span class="number">1</span>]);</div><div class="line">  <span class="keyword">double</span> outputValue = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (inputValue &gt;= <span class="number">0</span>) &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USE_MYMATH</span></div><div class="line">    outputValue = mysqrt(inputValue);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    outputValue = <span class="built_in">sqrt</span>(inputValue);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"The square root of %g is %g\n"</span>, inputValue, outputValue);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="完整源代码以及CMakeLists-txt文件：Step2"><a href="#完整源代码以及CMakeLists-txt文件：Step2" class="headerlink" title="完整源代码以及CMakeLists.txt文件：Step2"></a>完整源代码以及CMakeLists.txt文件：<a href="https://gitlab.kitware.com/cmake/cmake/tree/master/Tests/Tutorial/Step2" target="_blank" rel="external">Step2</a></h3><h2 id="三-安装与测试"><a href="#三-安装与测试" class="headerlink" title="三. 安装与测试"></a>三. 安装与测试</h2><p>cmake可以指定安装规则，实现将可执行文件，库文件，和头文件。最后可以通过make install来安装到指定目录，需要在CMakeLists.txt文件添加如下内容</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 可自定义安装目录，默认为/usr/local/</span></div><div class="line">set(CMAKE_INSTALL_PREFIX /home/work/)</div><div class="line"><span class="comment"># 添加安装库和头文件</span></div><div class="line">install (TARGETS MathFunctions DESTINATION bin)</div><div class="line">install (FILES MathFunctions.h DESTINATION include)</div><div class="line"></div><div class="line"><span class="comment"># 添加安装可执行文件</span></div><div class="line">install (TARGETS Tutorial DESTINATION bin)</div><div class="line">install (FILES <span class="string">"$&#123;PROJECT_BINARY_DIR&#125;/TutorialConfig.h"</span></div><div class="line">         DESTINATION include)</div></pre></td></tr></table></figure>
<p>cmake也可以支持测试，比如有些项目可以通过make test来验证，这里不做介绍，可官方教程或者下面代码链接</p>
<h3 id="完整源代码以及CMakeLists-txt文件：Step3"><a href="#完整源代码以及CMakeLists-txt文件：Step3" class="headerlink" title="完整源代码以及CMakeLists.txt文件：Step3"></a>完整源代码以及CMakeLists.txt文件：<a href="https://gitlab.kitware.com/cmake/cmake/tree/master/Tests/Tutorial/Step3" target="_blank" rel="external">Step3</a></h3><h2 id="四-构建安装包"><a href="#四-构建安装包" class="headerlink" title="四. 构建安装包"></a>四. 构建安装包</h2><p>当我们想发布项目提供别人使用，就需要项目打包（二进制安装包和源码安装包）。cmake中提供了cpack的工具，专门用来打包。在源码目录的CMakeLists.txt文件尾部添加如下内容</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 构建一个cpack的安装包</span></div><div class="line"><span class="comment"># 导入InstallRequiredSystemLibraries模块为了导入当前项目所需要的运行时库</span></div><div class="line">include (InstallRequiredSystemLibraries)</div><div class="line">set (CPACK_RESOURCE_FILE_LICENSE</div><div class="line">     <span class="string">"$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/License.txt"</span>)</div><div class="line">set (CPACK_PACKAGE_VERSION_MAJOR <span class="string">"$&#123;Tutorial_VERSION_MAJOR&#125;"</span>)</div><div class="line">set (CPACK_PACKAGE_VERSION_MINOR <span class="string">"$&#123;Tutorial_VERSION_MINOR&#125;"</span>)</div><div class="line">include (CPack)</div></pre></td></tr></table></figure>
<ul>
<li>生成二进制安装包 <code>cpack --config CPackConfig.cmake</code></li>
<li>生成源码安装包 <code>cpack --config CPackSourceConfig.cmake</code></li>
</ul>
<h3 id="完整源代码以及CMakeLists-txt文件：Step4"><a href="#完整源代码以及CMakeLists-txt文件：Step4" class="headerlink" title="完整源代码以及CMakeLists.txt文件：Step4"></a>完整源代码以及CMakeLists.txt文件：<a href="https://gitlab.kitware.com/cmake/cmake/tree/master/Tests/Tutorial/Step6" target="_blank" rel="external">Step4</a></h3><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://cmake.org/cmake-tutorial/" target="_blank" rel="external">官方教程</a><br><a href="http://www.hahack.com/codes/cmake/" target="_blank" rel="external">cmake入门实战</a><br><a href="https://cmake.org/download/" target="_blank" rel="external">cmake下载链接</a></p>
]]></content>
    
    <summary type="html">
    
      cmake工具的使用教程
    
    </summary>
    
      <category term="C/C++" scheme="http://coderlight.cn/categories/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>C/C++实现函数返回字符串</title>
    <link href="http://coderlight.cn/2017/09/04/C-C-%E5%AE%9E%E7%8E%B0%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://coderlight.cn/2017/09/04/C-C-实现函数返回字符串/</id>
    <published>2017-09-04T11:23:21.000Z</published>
    <updated>2017-09-04T15:05:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如何实现一个返回值为char*的函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">fun</span><span class="params">(...)</span></span>;</div></pre></td></tr></table></figure></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="方法1：返回字符串常量"><a href="#方法1：返回字符串常量" class="headerlink" title="方法1：返回字符串常量"></a>方法1：返回字符串常量</h3><p>返回一个指向字符串常量的指针，但是这个方法非常局限，因为字符串常量存储在全局静态区，是只读内存区，无法对它进行计算和修改<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">fun</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="string">"hello world"</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 或者如下方式</span></div><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">fun</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//  不加const_cast会有warning:warning: deprecated conversion from string constant to 'char*' [-Wwrite-strings]</span></div><div class="line">    <span class="keyword">char</span> *str = <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span> *&gt;(<span class="string">"hello world"</span>);</div><div class="line">    <span class="keyword">return</span> str;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="方法2：使用全局申明的数组变量"><a href="#方法2：使用全局申明的数组变量" class="headerlink" title="方法2：使用全局申明的数组变量"></a>方法2：使用全局申明的数组变量</h3><p>使用一个全局数组变量来存储，简单易用，缺点是任何人可以在任何时候都可以修改这个数组，而且函数的下一次调用会覆盖掉当前值，此外，全局数组的内存大小需要$ \geq $函数返回值所需要的内存大小<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> g_str[<span class="number">100</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">fun</span><span class="params">()</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    g_str[i] = ...</div><div class="line">    ...</div><div class="line">    <span class="keyword">return</span> g_str;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="方法3：使用静态数组"><a href="#方法3：使用静态数组" class="headerlink" title="方法3：使用静态数组"></a>方法3：使用静态数组</h3><p>static可以保持变量内容的持久。存储在静态数据区的变量会在程序刚开始运行就完成初始化，也是唯一一次初始化。只有拥有指向该数组的指针可以修改这个静态数组，函数的下一次调用会覆盖这个数组的内容（static的初始化赋值语句只会执行一次）。此外，和全局数组一样，大型缓冲区闲置不用非常浪费内存<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">fun</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buffer[<span class="number">100</span>];</div><div class="line">	...</div><div class="line">	<span class="keyword">return</span> buffer;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="方法4：函数内部显示分配堆内存来保存返回值"><a href="#方法4：函数内部显示分配堆内存来保存返回值" class="headerlink" title="方法4：函数内部显示分配堆内存来保存返回值"></a>方法4：函数内部显示分配堆内存来保存返回值</h3><p>每次调用时都会创建新的内存，所以该函数调用不会覆盖以前的返回值。适用于多线程。缺点是程序员必须手动管理内存，不在同一代码块中malloc和free，会很容易出现内存泄露的bug<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">fun</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">char</span> *str = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</div><div class="line">	...</div><div class="line">	<span class="keyword">return</span> str;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 外部调用后需要释放内存</span></div><div class="line"><span class="keyword">char</span> *str = fun()</div><div class="line"><span class="built_in">free</span>(str);</div></pre></td></tr></table></figure></p>
<h3 id="方法5：调用者分配内存来保存返回值【推荐】"><a href="#方法5：调用者分配内存来保存返回值【推荐】" class="headerlink" title="方法5：调用者分配内存来保存返回值【推荐】"></a>方法5：调用者分配内存来保存返回值【推荐】</h3><p><strong>最佳方案</strong>：调用者分配内存来保存函数的返回值，在同一个代码块中malloc和free内存，同时调用者应该设置指定缓冲区大小<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">char* fun(char *result, int size) &#123;</div><div class="line">    ...</div><div class="line">    strncpy(result, 'hello world', size);</div><div class="line">    ...</div><div class="line">	return result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 外部调用</div><div class="line">char *buffer = (char *)malloc(size);</div><div class="line">fun(buffer, size);</div><div class="line">...</div><div class="line">free(buffer);</div></pre></td></tr></table></figure></p>
<p>标准库中的fgets()等函数就是采用这样的方法来实现<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span> *<span class="title">fgets</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> n, FILE *stream)</span></span>;</div></pre></td></tr></table></figure></p>
<p>给出一个调用<strong>fgets()</strong>的示例程序，来自 <a href="http://www.cplusplus.com" target="_blank" rel="external">www.cplusplus.com</a></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* fgets example */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">   FILE * pFile;</div><div class="line">   <span class="keyword">char</span> mystring [<span class="number">100</span>];</div><div class="line"></div><div class="line">   pFile = fopen (<span class="string">"myfile.txt"</span> , <span class="string">"r"</span>);</div><div class="line">   <span class="keyword">if</span> (pFile == <span class="literal">NULL</span>) perror (<span class="string">"Error opening file"</span>);</div><div class="line">   <span class="keyword">else</span> &#123;</div><div class="line">     <span class="keyword">if</span> ( fgets (mystring , <span class="number">100</span> , pFile) != <span class="literal">NULL</span> )</div><div class="line">       <span class="built_in">puts</span> (mystring);</div><div class="line">     fclose (pFile);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      本文总结5种方法来实现C/C++中函数返回值为字符串的场景，并对每种方法做以分析，最后参照C标准库fgets()函数的实现方式，给出最佳方案
    
    </summary>
    
      <category term="C/C++" scheme="http://coderlight.cn/categories/C-C/"/>
    
    
  </entry>
  
</feed>
