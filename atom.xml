<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Light&#39;s Home</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://coderlight.cn/"/>
  <updated>2017-09-04T14:52:08.000Z</updated>
  <id>http://coderlight.cn/</id>
  
  <author>
    <name>Light</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C/C++实现函数返回字符串</title>
    <link href="http://coderlight.cn/2017/09/04/C-C-%E5%AE%9E%E7%8E%B0%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://coderlight.cn/2017/09/04/C-C-实现函数返回字符串/</id>
    <published>2017-09-04T11:23:21.000Z</published>
    <updated>2017-09-04T14:52:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如何实现一个返回值为char*的函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">fun</span><span class="params">(...)</span></span>;</div></pre></td></tr></table></figure></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="方法1：返回字符串常量"><a href="#方法1：返回字符串常量" class="headerlink" title="方法1：返回字符串常量"></a>方法1：返回字符串常量</h3><p>返回一个指向字符串常量的指针，但是这个方法非常局限，因为字符串常量存储在全局静态区，是只读内存区，无法对它进行计算和修改<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">fun</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="string">"hello world"</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 或者如下方式</span></div><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">fun</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//  不加const_cast会有warning:warning: deprecated conversion from string constant to 'char*' [-Wwrite-strings]</span></div><div class="line">    <span class="keyword">char</span> *str = <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span> *&gt;(<span class="string">"hello world"</span>);</div><div class="line">    <span class="keyword">return</span> str;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="方法2：使用全局申明的数组变量"><a href="#方法2：使用全局申明的数组变量" class="headerlink" title="方法2：使用全局申明的数组变量"></a>方法2：使用全局申明的数组变量</h3><p>使用一个全局数组变量来存储，简单易用，缺点是任何人可以在任何时候都可以修改这个数组，而且函数的下一次调用会覆盖掉当前值，此外，全局数组的内存大小需要$ \geq $函数返回值所需要的内存大小<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> g_str[<span class="number">100</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">fun</span><span class="params">()</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    g_str[i] = ...</div><div class="line">    ...</div><div class="line">    <span class="keyword">return</span> g_str;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="方法3：使用静态数组"><a href="#方法3：使用静态数组" class="headerlink" title="方法3：使用静态数组"></a>方法3：使用静态数组</h3><p>static可以保持变量内容的持久。存储在静态数据区的变量会在程序刚开始运行就完成初始化，也是唯一一次初始化。只有拥有指向该数组的指针可以修改这个静态数组，函数的下一次调用会覆盖这个数组的内容（static的初始化赋值语句只会执行一次）。此外，和全局数组一样，大型缓冲区闲置不用非常浪费内存<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">fun</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buffer[<span class="number">100</span>];</div><div class="line">	...</div><div class="line">	<span class="keyword">return</span> buffer;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="方法4：函数内部显示分配堆内存来保存返回值"><a href="#方法4：函数内部显示分配堆内存来保存返回值" class="headerlink" title="方法4：函数内部显示分配堆内存来保存返回值"></a>方法4：函数内部显示分配堆内存来保存返回值</h3><p>每次调用时都会创建新的内存，所以该函数调用不会覆盖以前的返回值。适用于多线程。缺点是程序员必须手动管理内存，不在同一代码块中malloc和free，会很容易出现内存泄露的bug<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">fun</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">char</span> *str = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</div><div class="line">	...</div><div class="line">	<span class="keyword">return</span> str;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 外部调用后需要释放内存</span></div><div class="line"><span class="keyword">char</span> *str = fun()</div><div class="line"><span class="built_in">free</span>(str);</div></pre></td></tr></table></figure></p>
<h3 id="方法5：调用者分配内存来保存返回值【推荐】"><a href="#方法5：调用者分配内存来保存返回值【推荐】" class="headerlink" title="方法5：调用者分配内存来保存返回值【推荐】"></a>方法5：调用者分配内存来保存返回值【推荐】</h3><p><strong>最佳方案</strong>：调用者分配内存来保存函数的返回值，在同一个代码块中malloc和free内存，同时调用者应该设置指定缓冲区大小<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">char* fun(char *result, int size) &#123;</div><div class="line">    ...</div><div class="line">    strncpy(result, 'hello world', size);</div><div class="line">    ...</div><div class="line">	return result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 外部调用</div><div class="line">char *buffer = (char *)malloc(size);</div><div class="line">fun(buffer, size);</div><div class="line">...</div><div class="line">free(buffer);</div></pre></td></tr></table></figure></p>
<p>标准库中的fgets()等函数就是采用这样的方法来实现<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span> *<span class="title">fgets</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> n, FILE *stream)</span></span>;</div></pre></td></tr></table></figure></p>
<p>给出一个调用<strong>fgets()</strong>的示例程序，来自 <a href="http://www.cplusplus.com" target="_blank" rel="external">www.cplusplus.com</a></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* fgets example */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">   FILE * pFile;</div><div class="line">   <span class="keyword">char</span> mystring [<span class="number">100</span>];</div><div class="line"></div><div class="line">   pFile = fopen (<span class="string">"myfile.txt"</span> , <span class="string">"r"</span>);</div><div class="line">   <span class="keyword">if</span> (pFile == <span class="literal">NULL</span>) perror (<span class="string">"Error opening file"</span>);</div><div class="line">   <span class="keyword">else</span> &#123;</div><div class="line">     <span class="keyword">if</span> ( fgets (mystring , <span class="number">100</span> , pFile) != <span class="literal">NULL</span> )</div><div class="line">       <span class="built_in">puts</span> (mystring);</div><div class="line">     fclose (pFile);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;如何实现一个返回值为char*的函数&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
    
    </summary>
    
      <category term="C/C++" scheme="http://coderlight.cn/categories/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://coderlight.cn/2017/09/01/hello-world/"/>
    <id>http://coderlight.cn/2017/09/01/hello-world/</id>
    <published>2017-09-01T03:21:00.000Z</published>
    <updated>2017-09-01T03:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
      <category term="test" scheme="http://coderlight.cn/categories/test/"/>
    
    
  </entry>
  
</feed>
